Question
Given a circular integer array nums (i.e., the next element of nums[nums.length - 1] is nums[0]), return the next greater number for every element in nums.

The next greater number of a number x is the first greater number to its traversing-order next in the array,
which means you could search circularly to find its next greater number. If it doesn't exist, return -1 for this number.

Solution
Using monotonic stack

class Solution {
public:
    vector<int> nextGreaterElements(vector<int>& nums) {
        /*vector<int>ans(nums);
        ans.insert(ans.end(),nums.begin(),nums.end());*/
        vector<int>ans(nums.size(),0);
        stack<int>st;
        for(int i=nums.size()-1;i>=0;i--)
        {
            if(st.size()==0)
            {
                st.push(nums[i]);
            }
            else
            {
                while(st.size()>0 && nums[i]>=st.top())
                {
                    st.pop();
                }
                st.push(nums[i]);
            }
        }
        for(int i=nums.size()-1;i>=0;i--)
        {
            if(st.size()==0)
            {
                st.push(nums[i]);
            }
            else if(nums[i]>=st.top())
            {
                while(st.size()>0 && nums[i]>=st.top())
                {
                    st.pop();
                }
                if(st.size()==0)
                {ans[i]=-1;st.push(nums[i]);}
                else
                {
                    ans[i]=st.top();
                    st.push(nums[i]);
                }
            }
            else
            {
                ans[i]=st.top();
                st.push(nums[i]);
            }
        }
        return ans;
    }
};
