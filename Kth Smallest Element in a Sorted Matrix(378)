Question

Given an n x n matrix where each of the rows and columns is sorted in ascending order, return the kth smallest element in the matrix.

Note that it is the kth smallest element in the sorted order, not the kth distinct element.


Solutions

naive
class Solution {
public:
    int kthSmallest(vector<vector<int>>& matrix, int k) {
        int n=matrix.size();
        int m=matrix[0].size();
        int x;
        vector<int>ans;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                int x=matrix[i][j];
                ans.push_back(x);
            }
        }
        sort(ans.begin(),ans.end());
        return ans[k-1];
    }
};

better

use max heap


best
class Solution {
public:
    int count_less(int val,vector<vector<int>>& matrix){
        int cnt=0;
        for(int i=0;i<matrix.size();i++)
        {
            cnt+=upper_bound(matrix[i].begin(),matrix[i].end(),val)-matrix[i].begin();
        }
        return cnt;
    }
    int kthSmallest(vector<vector<int>>& matrix, int k) {
        int n=matrix.size();
        int low=matrix[0][0];
        int high=matrix[n-1][n-1];
        while(low<high)
        {
            int mid=low+(high-low)/2;
            if(count_less(mid,matrix)<k)
                low=mid+1;
            else
                high=mid;
        }
        return low;
    }
};
